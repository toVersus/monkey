package compiler

import (
	"github.com/toversus/monkey/ast"
	"github.com/toversus/monkey/code"
	"github.com/toversus/monkey/object"
)

// Compiler holds the generated bytecode for instructions
// and slice of constants that serves as constant pool
type Compiler struct {
	instructions code.Instructions
	constants    []object.Object
}

// New implements constructor of Compiler struct.
func New() *Compiler {
	return &Compiler{
		instructions: code.Instructions{},
		constants:    []object.Object{},
	}
}

// Compile has empty method right now.
func (c *Compiler) Compile(node ast.Node) error {
	return nil
}

// Bytecode represents what VM will recieve.
func (c *Compiler) Bytecode() *Bytecode {
	return &Bytecode{
		Instructions: c.instructions,
		Constants:    c.constants,
	}
}

// Bytecode contains the instructions the compiler generated
// and the constants the compiler evaluated.
type Bytecode struct {
	Instructions code.Instructions
	Constants    []object.Object
}
